#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:0
#+OPTIONS: creator:0
#+OPTIONS: author:false
#+OPTIONS: timestamp:0
#+REVEAL_CONTROLS: false
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_EXTRA_CSS: ./reveal.js/lib/css/zenburn.css
#+REVEAL_EXTRA_CSS: ./presentation.css

#+OPTIONS: reveal_title_slide:"<h1>%t</h1>"
#+TITLE: Practical Dependent Types

* What

  - Types that depend on values
  - Link mathematical theory of logic to type systems

** Curry-Howard isomorphism

    - Every function in typed lambda calculus is a proof in intuitionist logic
      - (no excluded middle, no double negation)

** Worth a google:

   - /Propositions as Types/ - Philip Wadler
   - Calculus of constructions
   - The various type systems (like System F of Haskell fame)

* Why

  - Expressive types /and/ formal specification at once!

** If it compiles, ship it!

   - If your types express your logic, the compiler has proven your program correct

* Idris

  - A dependent type declaration for a vector of certain length

#+begin_src idris
data Vect : Nat -> Type -> Type where
     Nil : Vect Z a
     (::) : a -> Vect k a -> Vect (S k) a
#+end_src
